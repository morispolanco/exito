import streamlit as st
import requests
import json
from urllib.parse import urlparse
from streamlit_extras.metric_cards import style_metric_cards
import matplotlib.pyplot as plt

# Estilizar las tarjetas de m√©tricas (opcional)
style_metric_cards()

# T√≠tulo de la aplicaci√≥n
st.title("üìà An√°lisis de Potencial de √âxito de Plataformas Digitales")

# Descripci√≥n de la aplicaci√≥n
st.markdown("""
Esta aplicaci√≥n analiza el potencial de √©xito de una plataforma digital basada en su URL. Utiliza las APIs de Serper para obtener informaci√≥n relevante sobre la plataforma y de Together para evaluar su potencial en el mercado actual. Adem√°s, proporciona recomendaciones detalladas para mejorar tanto en forma como en contenido.
""")

# Entrada de la URL
url_input = st.text_input("üîó Ingresa la URL de la plataforma digital que deseas analizar:", "")

# Bot√≥n para iniciar el an√°lisis
if st.button("‚úÖ Analizar"):
    if not url_input:
        st.error("‚ö†Ô∏è Por favor, ingresa una URL v√°lida.")
    else:
        # Validar y formatear la URL
        parsed_url = urlparse(url_input)
        if not parsed_url.scheme:
            url_input = "http://" + url_input  # A√±adir esquema si falta

        try:
            response = requests.get(url_input, timeout=10)
            if response.status_code != 200:
                st.error(f"‚ö†Ô∏è No se pudo acceder a la URL proporcionada. C√≥digo de estado: {response.status_code}")
                st.stop()
        except requests.exceptions.RequestException as e:
            st.error(f"‚ö†Ô∏è Error al acceder a la URL: {e}")
            st.stop()

        st.info("üîÑ Procesando la URL...")

        # Extraer el dominio para la b√∫squeda
        domain = parsed_url.netloc
        if not domain:
            st.error("‚ö†Ô∏è URL inv√°lida. Por favor, intenta nuevamente.")
            st.stop()
        else:
            # Realizar b√∫squeda con Serper API
            serper_api_key = st.secrets["serper_api_key"]
            serper_url = "https://google.serper.dev/search"
            headers_serper = {
                "X-API-KEY": serper_api_key,
                "Content-Type": "application/json"
            }
            query = f"Informaci√≥n sobre {domain}"
            data_serper = {
                "q": query
            }

            with st.spinner("üîç Realizando b√∫squeda con Serper..."):
                response_serper = requests.post(serper_url, headers=headers_serper, json=data_serper)
                if response_serper.status_code == 200:
                    search_results = response_serper.json()
                    # Procesar los resultados
                    snippets = []
                    if "organic" in search_results:
                        for item in search_results["organic"]:
                            if "snippet" in item:
                                snippets.append(item["snippet"])
                    search_summary = "\n\n".join(snippets) if snippets else "No se encontraron resultados relevantes."
                else:
                    st.error(f"‚ùå Error al acceder a Serper API: {response_serper.status_code}")
                    st.stop()

            # Preparar el mensaje para Together API con enfoque en demandas del mercado y recomendaciones
            together_api_key = st.secrets["together_api_key"]
            together_url = "https://api.together.xyz/v1/chat/completions"
            headers_together = {
                "Authorization": f"Bearer {together_api_key}",
                "Content-Type": "application/json"
            }
            messages = [
                {
                    "role": "system",
                    "content": (
                        "Eres un experto en an√°lisis de plataformas digitales con un enfoque en las demandas del mercado actual. "
                        "Proporciona una evaluaci√≥n detallada del potencial de √©xito de la plataforma digital basada en la siguiente informaci√≥n. "
                        "Incluye recomendaciones sobre aspectos de forma (dise√±o, usabilidad, interfaz) y fondo (funcionalidades, contenido, estrategia de mercado), se√±alando lo que sobra y lo que falta. "
                        "Adem√°s, expresa el potencial de √©xito en t√©rminos de porcentaje y proporciona un resumen ejecutivo de los hallazgos clave."
                    )
                },
                {
                    "role": "user",
                    "content": f"Aqu√≠ hay informaci√≥n sobre la plataforma: {search_summary}"
                }
            ]
            data_together = {
                "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
                "messages": messages,
                "max_tokens": 2512,
                "temperature": 0.7,
                "top_p": 0.7,
                "top_k": 50,
                "repetition_penalty": 1,
                "stop": ["<|eot_id|>"],
                "stream": False  # Mantener en False para simplificar el manejo
            }

            # Realizar solicitud a Together API
            with st.spinner("üß† Analizando con Together..."):
                response_together = requests.post(together_url, headers=headers_together, json=data_together)
                if response_together.status_code == 200:
                    analysis = response_together.json()
                    # Asumiendo que la respuesta contiene 'choices' con 'message'
                    if "choices" in analysis and len(analysis["choices"]) > 0:
                        result = analysis["choices"][0]["message"]["content"]

                        # Separar el an√°lisis en secciones utilizando t√≠tulos
                        secciones = {}
                        current_section = None
                        for line in result.split('\n'):
                            if line.strip().startswith("**") and line.strip().endswith("**:"):
                                # Es una nueva secci√≥n
                                section_title = line.strip().strip('*:').strip()
                                secciones[section_title] = ""
                                current_section = section_title
                            elif current_section:
                                secciones[current_section] += line + "\n"

                        # Mostrar Resumen Ejecutivo
                        if "Resumen Ejecutivo" in secciones:
                            st.subheader("üìÑ Resumen Ejecutivo")
                            st.write(secciones["Resumen Ejecutivo"])
                            del secciones["Resumen Ejecutivo"]

                        # Mostrar Potencial de √âxito en Porcentaje
                        if "Potencial de √âxito" in secciones:
                            st.subheader("üìä Potencial de √âxito")
                            try:
                                # Extraer el porcentaje del texto
                                import re
                                porcentaje = re.search(r'(\d+)%', secciones["Potencial de √âxito"])
                                if porcentaje:
                                    porcentaje_val = int(porcentaje.group(1))
                                    # Visualizaci√≥n con matplotlib
                                    fig, ax = plt.subplots(figsize=(2, 2))
                                    ax.pie([porcentaje_val, 100 - porcentaje_val], colors=['#4CAF50', '#CCCCCC'], startangle=90, counterclock=False)
                                    ax.axis('equal')  # Equal aspect ratio
                                    st.pyplot(fig)
                                    st.write(f"**Potencial de √âxito: {porcentaje_val}%**")
                                else:
                                    st.write(secciones["Potencial de √âxito"])
                            except Exception as e:
                                st.write(secciones["Potencial de √âxito"])
                            del secciones["Potencial de √âxito"]

                        # Mostrar Evaluaci√≥n Detallada
                        if "Evaluaci√≥n Detallada" in secciones:
                            st.subheader("üîç Evaluaci√≥n Detallada")
                            st.write(secciones["Evaluaci√≥n Detallada"])
                            del secciones["Evaluaci√≥n Detallada"]

                        # Mostrar Recomendaciones
                        if "Recomendaciones" in secciones:
                            st.subheader("üí° Recomendaciones")
                            st.write(secciones["Recomendaciones"])
                            del secciones["Recomendaciones"]

                        # Mostrar cualquier otra secci√≥n
                        for titulo, contenido in secciones.items():
                            st.subheader(f"üìå {titulo}")
                            st.write(contenido)

                        # Opcional: Permitir al usuario descargar el an√°lisis completo
                        with st.expander("üì• Descargar An√°lisis Completo"):
                            st.download_button(
                                label="Descargar como TXT",
                                data=result,
                                file_name="analisis_plataforma.txt",
                                mime="text/plain"
                            )
                            # Para descargar como PDF, se requerir√≠an librer√≠as adicionales
                    else:
                        st.error("‚ùå Respuesta inesperada de Together API.")
                else:
                    st.error(f"‚ùå Error al acceder a Together API: {response_together.status_code}")

