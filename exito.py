import streamlit as st
import requests
import json
from urllib.parse import urlparse
from io import BytesIO
from docx import Document
from docx.shared import Inches
import matplotlib.pyplot as plt
import re

# T√≠tulo de la aplicaci√≥n
st.title("üìà An√°lisis de Potencial de √âxito de Plataformas Digitales")

# Descripci√≥n de la aplicaci√≥n
st.markdown("""
Esta aplicaci√≥n analiza el potencial de √©xito de una plataforma digital basada en su URL. Utiliza las APIs de Serper para obtener informaci√≥n relevante sobre la plataforma y de Together para evaluar su potencial en el mercado actual. Adem√°s, proporciona recomendaciones detalladas para mejorar tanto en forma como en contenido, as√≠ como una estimaci√≥n del m√°ximo de visitantes diarios que puede recibir la plataforma.
""")

# Entrada de la URL
url_input = st.text_input("üîó Ingresa la URL de la plataforma digital que deseas analizar:", "")

# Bot√≥n para iniciar el an√°lisis
if st.button("‚úÖ Analizar"):
    if not url_input:
        st.error("‚ö†Ô∏è Por favor, ingresa una URL v√°lida.")
    else:
        # Validar y formatear la URL
        parsed_url = urlparse(url_input)
        if not parsed_url.scheme:
            url_input = "http://" + url_input  # A√±adir esquema si falta

        try:
            response = requests.get(url_input, timeout=10)
            if response.status_code != 200:
                st.error(f"‚ö†Ô∏è No se pudo acceder a la URL proporcionada. C√≥digo de estado: {response.status_code}")
                st.stop()
        except requests.exceptions.RequestException as e:
            st.error(f"‚ö†Ô∏è Error al acceder a la URL: {e}")
            st.stop()

        st.info("üîÑ Procesando la URL...")

        # Extraer el dominio para la b√∫squeda
        domain = parsed_url.netloc
        if not domain:
            st.error("‚ö†Ô∏è URL inv√°lida. Por favor, intenta nuevamente.")
            st.stop()
        else:
            # Realizar b√∫squeda con Serper API
            serper_api_key = st.secrets["serper_api_key"]
            serper_url = "https://google.serper.dev/search"
            headers_serper = {
                "X-API-KEY": serper_api_key,
                "Content-Type": "application/json"
            }
            query = f"Informaci√≥n sobre {domain}"
            data_serper = {
                "q": query
            }

            with st.spinner("üîç Realizando b√∫squeda con Serper..."):
                response_serper = requests.post(serper_url, headers=headers_serper, json=data_serper)
                if response_serper.status_code == 200:
                    search_results = response_serper.json()
                    # Procesar los resultados
                    snippets = []
                    if "organic" in search_results:
                        for item in search_results["organic"]:
                            if "snippet" in item:
                                snippets.append(item["snippet"])
                    search_summary = "\n\n".join(snippets) if snippets else "No se encontraron resultados relevantes."
                else:
                    st.error(f"‚ùå Error al acceder a Serper API: {response_serper.status_code}")
                    st.stop()

            # Preparar el mensaje para Together API con enfoque en demandas del mercado, recomendaciones y estimaci√≥n de visitantes
            together_api_key = st.secrets["together_api_key"]
            together_url = "https://api.together.xyz/v1/chat/completions"
            headers_together = {
                "Authorization": f"Bearer {together_api_key}",
                "Content-Type": "application/json"
            }
            messages = [
                {
                    "role": "system",
                    "content": (
                        "Eres un experto en an√°lisis de plataformas digitales con un enfoque en las demandas del mercado actual. "
                        "Proporciona una evaluaci√≥n detallada del potencial de √©xito de la plataforma digital basada en la siguiente informaci√≥n. "
                        "Incluye recomendaciones sobre aspectos de forma (dise√±o, usabilidad, interfaz) y fondo (funcionalidades, contenido, estrategia de mercado), se√±alando lo que sobra y lo que falta. "
                        "Adem√°s, expresa el potencial de √©xito en t√©rminos de porcentaje, proporciona una estimaci√≥n del m√°ximo de visitantes al d√≠a y un resumen ejecutivo de los hallazgos clave."
                    )
                },
                {
                    "role": "user",
                    "content": f"Aqu√≠ hay informaci√≥n sobre la plataforma: {search_summary}"
                }
            ]
            data_together = {
                "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
                "messages": messages,
                "max_tokens": 2512,
                "temperature": 0.7,
                "top_p": 0.7,
                "top_k": 50,
                "repetition_penalty": 1,
                "stop": ["<|eot_id|>"],
                "stream": False  # Mantener en False para simplificar el manejo
            }

            # Realizar solicitud a Together API
            with st.spinner("üß† Analizando con Together..."):
                response_together = requests.post(together_url, headers=headers_together, json=data_together)
                if response_together.status_code == 200:
                    analysis = response_together.json()
                    # Asumiendo que la respuesta contiene 'choices' con 'message'
                    if "choices" in analysis and len(analysis["choices"]) > 0:
                        result = analysis["choices"][0]["message"]["content"]

                        # Separar el an√°lisis en secciones utilizando t√≠tulos en negrita
                        secciones = {}
                        current_section = None
                        for line in result.split('\n'):
                            line = line.strip()
                            # Detectar t√≠tulos en formato **T√≠tulo**:
                            match = re.match(r'\*\*(.*?)\*\*:', line)
                            if match:
                                section_title = match.group(1).strip()
                                secciones[section_title] = ""
                                current_section = section_title
                            elif current_section:
                                secciones[current_section] += line + "\n"

                        # Crear un documento DOCX
                        doc = Document()
                        doc.add_heading('An√°lisis de Potencial de √âxito', 0)

                        # Agregar Resumen Ejecutivo
                        if "Resumen Ejecutivo" in secciones:
                            doc.add_heading('üìÑ Resumen Ejecutivo', level=1)
                            doc.add_paragraph(secciones["Resumen Ejecutivo"])
                            del secciones["Resumen Ejecutivo"]

                        # Agregar Potencial de √âxito
                        if "Potencial de √âxito" in secciones:
                            doc.add_heading('üìä Potencial de √âxito', level=1)
                            pot_success_text = secciones["Potencial de √âxito"]
                            # Extraer el porcentaje del texto
                            porcentaje = re.search(r'(\d+)%', pot_success_text)
                            if porcentaje:
                                porcentaje_val = int(porcentaje.group(1))
                                # Visualizaci√≥n con matplotlib
                                fig, ax = plt.subplots(figsize=(2, 2))
                                ax.pie([porcentaje_val, 100 - porcentaje_val], colors=['#4CAF50', '#CCCCCC'], startangle=90, counterclock=False)
                                ax.axis('equal')  # Equal aspect ratio
                                st.pyplot(fig)
                                st.write(f"**Potencial de √âxito: {porcentaje_val}%**")
                                # Agregar al DOCX
                                doc.add_paragraph(f"**Potencial de √âxito: {porcentaje_val}%**")
                            else:
                                st.write(secciones["Potencial de √âxito"])
                                doc.add_paragraph(secciones["Potencial de √âxito"])
                            del secciones["Potencial de √âxito"]

                        # Agregar Estimaci√≥n de Visitantes Diarios
                        if "Estimaci√≥n de Visitantes Diarios" in secciones:
                            est_visitors_text = secciones["Estimaci√≥n de Visitantes Diarios"]
                            est_visitors_match = re.search(r'(\d[\d,\.]*)\s*visitantes al d√≠a', es
